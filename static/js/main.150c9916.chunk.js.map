{"version":3,"sources":["reducers/index.js","actions/types.js","components/Task.js","actions/index.js","components/TaskList.js","components/App.js","index.js"],"names":["INITIAL_STATE","id","text","finished","combineReducers","tasks","state","arguments","length","undefined","action","console","log","payload","type","Object","toConsumableArray","concat","filter","task","map","Task","editedText","_this","props","editMode","changedState","submitHandler","e","preventDefault","_this$props","editTask","setState","changeTaskState","_this$props2","isFinishedTask","renderEditInput","react_default","a","createElement","onSubmit","className","autoFocus","value","onChange","target","onBlur","onKeyDown","keyCode","_this2","this","_this$props3","removeTask","defaultChecked","onClick","Component","connect","taskId","editedTaskText","isCompleted","_ref","view","i","components_Task","key","App","newTaskText","addNewTask","_this$state","components_TaskList","newTaskId","ReactDOM","render","es","store","createStore","reducers","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.150c9916.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nimport { NEW_TASK, DELETE_TASK, EDIT_TASK, ISFINISHED_TASK } from '../actions/types';\r\n\r\nconst INITIAL_STATE = [\r\n    { id: 1, text: \"buy some apples\", finished: true },\r\n    { id: 2, text: \"could use some oranges\", finished: false },\r\n    { id: 3, text: \"kiwi is not bad also\", finished: false },\r\n    { id: 4, text: \"bananas are a must!\", finished: true },\r\n]\r\n\r\nconst tasksReducer = (state = INITIAL_STATE, action) => {\r\n    console.log(action.payload)\r\n    switch (action.type) {\r\n        case NEW_TASK:\r\n            return [...state, action.payload];\r\n        case DELETE_TASK:\r\n            return state.filter(task => {\r\n                return task.id !== action.payload;\r\n            });\r\n        case EDIT_TASK:\r\n            return [...state.map(task => {\r\n                if (task.id === action.payload.id) {\r\n                    task.text = action.payload.text;\r\n                }\r\n                return task;\r\n            })];\r\n        case ISFINISHED_TASK:\r\n            return [...state.map(task => {\r\n                if (task.id === action.payload.id) {\r\n                    task.finished = action.payload.finished;\r\n                }\r\n                return task;\r\n            })];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default combineReducers({\r\n    tasks: tasksReducer\r\n})","const NEW_TASK = \"NEW_TASK\";\r\nconst DELETE_TASK = \"DELETE_TASK\"\r\nconst EDIT_TASK = \"EDIT_TASK\"\r\nconst ISFINISHED_TASK = \"ISFINISHED_TASK\"\r\n\r\nexport { NEW_TASK, DELETE_TASK, EDIT_TASK, ISFINISHED_TASK };","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { removeTask, editTask, isFinishedTask } from '../actions/index'\r\n\r\nclass Task extends Component {\r\n    state = {\r\n        editedText: this.props.task.text,\r\n        editMode: false,\r\n        changedState: false\r\n    }\r\n\r\n    submitHandler = e => {\r\n        e.preventDefault();\r\n        const { task, editTask } = this.props;\r\n        const { editedText } = this.state;\r\n\r\n        editTask(task.id, editedText);\r\n        this.setState({ editMode: false });\r\n    }\r\n\r\n    changeTaskState = () => {\r\n        const { changedState } = this.state;\r\n        const { isFinishedTask, task } = this.props;\r\n        \r\n        isFinishedTask(task.id, task.finished);\r\n        this.setState({changedState: !changedState})\r\n    }\r\n\r\n    renderEditInput = () => {\r\n        const { editedText } = this.state;\r\n        const { task } = this.props;\r\n\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                <input className=\"task-edit-input\"\r\n                    autoFocus\r\n                    value={editedText}\r\n                    onChange={e => this.setState({ editedText: e.target.value })}\r\n                    onBlur={this.submitHandler}\r\n                    onKeyDown={e => e.keyCode === 27 && this.setState({ editMode: false, editedText: task.text })}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { removeTask, task } = this.props;\r\n        const { editMode } = this.state;\r\n\r\n        return (\r\n            <div className=\"task\">\r\n                <input type=\"checkbox\" defaultChecked={task.finished} onClick={this.changeTaskState} />\r\n                <div className=\"task-content-wrapper\">\r\n                    {editMode ? this.renderEditInput() : <p className={task.finished ? \"finished\" : \"\"}>{task.text}</p>}\r\n                    <div className=\"icons-wrapper\">\r\n                        <i className=\"fas fa-edit\" onClick={() => this.setState({ editMode: true })}></i>\r\n                        <i className=\"fas fa-trash-alt\" onClick={() => removeTask(task.id)}></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { removeTask, editTask, isFinishedTask })(Task);","import { NEW_TASK, DELETE_TASK, EDIT_TASK, ISFINISHED_TASK } from './types';\r\n\r\nconst addNewTask = (newTaskId, newTaskText) => {\r\n    return {\r\n        type: NEW_TASK,\r\n        payload: { id: newTaskId, text: newTaskText, finished: false }\r\n    }\r\n}\r\n\r\nconst removeTask = taskId => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        payload: taskId\r\n    }\r\n}\r\n\r\nconst editTask = (taskId, editedTaskText) => {\r\n    return {\r\n        type: EDIT_TASK,\r\n        payload: { id: taskId, text: editedTaskText }\r\n    }\r\n}\r\n\r\nconst isFinishedTask = (taskId, isCompleted) => {\r\n    return {\r\n        type: ISFINISHED_TASK,\r\n        payload: { id: taskId, finished: !isCompleted }\r\n    }\r\n}\r\n\r\nexport { addNewTask, removeTask, editTask, isFinishedTask };","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Task from './Task';\r\n\r\nconst TaskList = ({ tasks, view }) => {\r\n    return (\r\n        <div className=\"task-list\">\r\n            {view === \"todo\" && tasks.map((task, i) => !task.finished && <Task task={task} key={task.id} />)}\r\n            {view === \"done\" && tasks.map((task, i) => task.finished && <Task task={task} key={task.id} />)}\r\n            {view === \"all\" && tasks.map((task, i) => <Task task={task} key={task.id} />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => state;\r\n\r\nexport default connect(mapStateToProps)(TaskList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport TaskList from './TaskList';\r\nimport { addNewTask } from '../actions'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        newTaskText: \"\",\r\n        view: \"all\"\r\n    }\r\n\r\n    submitHandler = e => {\r\n        e.preventDefault();\r\n        const { addNewTask, tasks } = this.props;\r\n        const { newTaskText } = this.state;\r\n\r\n        addNewTask(tasks.length + 1, newTaskText)\r\n        this.setState({ newTaskText: \"\" })\r\n    }\r\n\r\n    render() {\r\n        const { newTaskText, view } = this.state;\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <h1 className=\"app-heading\">To Do List!</h1>\r\n                <div className=\"buttons\">\r\n                    <button className=\"buttons-to-do\" onClick={() => this.setState({ view: \"todo\" })}>To Do</button>\r\n                    <button className=\"buttons-done\" onClick={() => this.setState({ view: \"done\" })}>Done</button>\r\n                    <button className=\"buttons-all\" onClick={() => this.setState({ view: \"all\" })}>All</button>\r\n                </div>\r\n                <div>\r\n                    <form className=\"task-new\" onSubmit={this.submitHandler}>\r\n                        <input type=\"text\" value={newTaskText} onChange={(e) => this.setState({ newTaskText: e.target.value })} />\r\n                        <button type=\"submit\"><i className=\"fas fa-plus\"></i></button>\r\n                    </form>\r\n                </div>\r\n                <TaskList view={view} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => state;\r\n\r\nexport default connect(mapStateToProps, { addNewTask })(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport './css/style.css';\r\nimport reducers from './reducers';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n    <Provider store={createStore(reducers)}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n)"],"sourceRoot":""}